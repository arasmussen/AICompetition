/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChessGameServer_H
#define ChessGameServer_H

#include <TProcessor.h>
#include "ChessGameServer_types.h"



class ChessGameServerIf {
 public:
  virtual ~ChessGameServerIf() {}
  virtual void startgame(const std::string& whiteAlgorithm, const std::string& blackAlgorithm) = 0;
};

class ChessGameServerIfFactory {
 public:
  typedef ChessGameServerIf Handler;

  virtual ~ChessGameServerIfFactory() {}

  virtual ChessGameServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChessGameServerIf* /* handler */) = 0;
};

class ChessGameServerIfSingletonFactory : virtual public ChessGameServerIfFactory {
 public:
  ChessGameServerIfSingletonFactory(const boost::shared_ptr<ChessGameServerIf>& iface) : iface_(iface) {}
  virtual ~ChessGameServerIfSingletonFactory() {}

  virtual ChessGameServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChessGameServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChessGameServerIf> iface_;
};

class ChessGameServerNull : virtual public ChessGameServerIf {
 public:
  virtual ~ChessGameServerNull() {}
  void startgame(const std::string& /* whiteAlgorithm */, const std::string& /* blackAlgorithm */) {
    return;
  }
};

typedef struct _ChessGameServer_startgame_args__isset {
  _ChessGameServer_startgame_args__isset() : whiteAlgorithm(false), blackAlgorithm(false) {}
  bool whiteAlgorithm;
  bool blackAlgorithm;
} _ChessGameServer_startgame_args__isset;

class ChessGameServer_startgame_args {
 public:

  ChessGameServer_startgame_args() : whiteAlgorithm(""), blackAlgorithm("") {
  }

  virtual ~ChessGameServer_startgame_args() throw() {}

  std::string whiteAlgorithm;
  std::string blackAlgorithm;

  _ChessGameServer_startgame_args__isset __isset;

  void __set_whiteAlgorithm(const std::string& val) {
    whiteAlgorithm = val;
  }

  void __set_blackAlgorithm(const std::string& val) {
    blackAlgorithm = val;
  }

  bool operator == (const ChessGameServer_startgame_args & rhs) const
  {
    if (!(whiteAlgorithm == rhs.whiteAlgorithm))
      return false;
    if (!(blackAlgorithm == rhs.blackAlgorithm))
      return false;
    return true;
  }
  bool operator != (const ChessGameServer_startgame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChessGameServer_startgame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChessGameServer_startgame_pargs {
 public:


  virtual ~ChessGameServer_startgame_pargs() throw() {}

  const std::string* whiteAlgorithm;
  const std::string* blackAlgorithm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChessGameServer_startgame_result {
 public:

  ChessGameServer_startgame_result() {
  }

  virtual ~ChessGameServer_startgame_result() throw() {}


  bool operator == (const ChessGameServer_startgame_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChessGameServer_startgame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChessGameServer_startgame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChessGameServer_startgame_presult {
 public:


  virtual ~ChessGameServer_startgame_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChessGameServerClient : virtual public ChessGameServerIf {
 public:
  ChessGameServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ChessGameServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void startgame(const std::string& whiteAlgorithm, const std::string& blackAlgorithm);
  void send_startgame(const std::string& whiteAlgorithm, const std::string& blackAlgorithm);
  void recv_startgame();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChessGameServerProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ChessGameServerIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ChessGameServerProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_startgame(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChessGameServerProcessor(boost::shared_ptr<ChessGameServerIf> iface) :
    iface_(iface) {
    processMap_["startgame"] = &ChessGameServerProcessor::process_startgame;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ChessGameServerProcessor() {}
};

class ChessGameServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChessGameServerProcessorFactory(const ::boost::shared_ptr< ChessGameServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChessGameServerIfFactory > handlerFactory_;
};

class ChessGameServerMultiface : virtual public ChessGameServerIf {
 public:
  ChessGameServerMultiface(std::vector<boost::shared_ptr<ChessGameServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChessGameServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChessGameServerIf> > ifaces_;
  ChessGameServerMultiface() {}
  void add(boost::shared_ptr<ChessGameServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void startgame(const std::string& whiteAlgorithm, const std::string& blackAlgorithm) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->startgame(whiteAlgorithm, blackAlgorithm);
    }
  }

};



#endif
